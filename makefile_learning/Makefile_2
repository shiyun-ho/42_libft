NAME = libft.a



CC = gcc
CFLAGS = -Wall -Wextra -Werror 

SRC = sample1.c sample2.c
OBJ = $(SRC:.c=.o)

SRC_BONUS = bonus1.c bonus2.c
OBJ_BONUS = $(SRC_BONUS:.c=.o)



# Builds everything
all: $(NAME) 



$(NAME) : $(OBJ)
	# ar - create, modify, and extract from archives(i.e. a single file holding a collection of other files within a STRUCTURE, 
	# so that I can retrieve the members (org individual files)
	# create new dir + r: If lib exists, replace old files with new + c: Create lib if did not exists + s: Create Sorted index for faster indexing 
	ar rcs $(NAME) $(OBJ)
	randlib $(NAME)
 
bonus: $(OBJ_BONUS)
	ar rcs $(NAME) $(OBJ_BONUS)
	randlib $(NAME)



%.o : %.c
	# -c means compile source files, but do not link
	# $@ : TARGET
	# $^ : PRE-REQUISITES
	$(CC) $(CFLAGS) -c -o $@ $^



norminette: 
	@echo ">>> Checking norminette for all files"
	norminette -R CheckForbiddenSourceHeader $(SRC) $(SRC_BONUS)

clean: 
	rm -f $(OBJECTS)

# Removes all object files, then remove lib file libft.a
fclean: clean
	rm -f $(NAME)

# Rebuild: 1) Delete all ".o" files and lib file; 2) Start fresh compilation
re: fclean $(NAME)



# List all targets as actions that can be performed by make to avoid unexpected behaviour
.PHONY: norminette all clean fclean re bonus
